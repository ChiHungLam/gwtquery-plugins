#summary How to use the droppable plugin : Drafts !! !
<wiki:toc max_depth="3" />
=Plugin Information=
----

|| *Plugin name* ||Droppable||
|| *Latest release* ||1.0.0||
|| *Latest release date* ||Nov 26 2010||
|| *Maintainer* ||[http://code.google.com/u/julien.dramaix/ Julien Dramaix]||
|| *Issues tracking* || [http://code.google.com/p/gwtquery-plugins/issues/list?can=2&q=label%3ADroppable Open issues]||

This plugin is a gwt clone of the [http://jqueryui.com/demos/droppable/ JQuery-ui droppable plugin]

The Droppable plugin enables any DOM element and GWT widget to be droppable or in other words a target for draggable elements.


=Changelog=
----

==v1.0.0==
  * First release

=Using the plugin=
----

==Dependency==

The droppable plugin needs the [http://code.google.com/p/gwtquery-plugins/downloads/detail?name=commonui-plugin-1.3.jar common-ui library] and the [http://code.google.com/p/gwtquery-plugins/downloads/detail?name=draggable-plugin-1.0.1.jar draggable library]. If you are not using maven, just download the last version of these libraries and put it in the war/WEB-INF/lib folder.

==Configuration==

First of all you have to include the library in the classpath of your project. If you are using ant normally it is enough to download the library from the [http://code.google.com/p/gwtquery-plugins/downloads/list downloads page] and put it in the war/WEB-INF/lib folder. 

If you use maven, you have to add these blocks to your pom.xml
{{{
   <repositories>
        <repository>
         <id>plugins</id>
         <url>http://gwtquery-plugins.googlecode.com/svn/mavenrepo</url>
       </repository>
   </repositories>

   <build>
    <dependencies>
        <dependency>
            <groupId>com.googlecode.gwtquery.plugins</groupId>
            <artifactId>droppable-plugin</artifactId>
            <version>1.0.0</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>
   </build>
}}}

Then you need to inherit the plugin in your Module.gwt.xml file:
{{{
  <inherits name='gwtquery.plugins.droppable.Droppable'/>
}}}

==Call the plugin==

Simply, as with all gwtQuery plugins, just call the droppable plugin like that :
{{{
import static gwtquery.plugins.droppable.client.Droppable.Droppable;

...

$(".dropTarget").as(Droppable).droppable();
}}}

This calls the plugin with the default options. The elements with the css class name 'dropTarget' are now droppable.

==Disabled the plugin==

To remove the droppable functionality completely, just call the `destroy()` method of the plugin.

{{{
$(".dropTarget").as(Droppable).destroy();
}}}

 Note:
 The destroy method must be called when a droppable DOM element is removed of the DOM in order to release resources used by the plugin.

=Settings=
----

The drop operation is fully configurable ! You just have to give an instance of the class `gwtquery.plugins.droppable.client.DroppableOptions` when you call the plugin :
{{{
import static gwtquery.plugins.droppable.client.Droppable.Droppable;
import gwtquery.plugins.droppable.client.DroppableOptions;

...

DroppableOptions options = new DroppableOptions();
//set the options you want... See next paragraph
...
//call the plug-in with your options 
$(".dropTarget").as(Droppable).droppable(options); 
}}}


To retrieve the current options of a droppable element just call the `options()` method.

{{{
//return the options associated to the first element
DroppableOptions options = $(".dropTarget").as(Droppable).options();
}}}

And for change the options


{{{
//reinitialise default options
$(".dropTarget").as(Droppable).options(new DroppableOptions());
}}}

==!DroppableOptions Object==

To configure the plugin, just set the properties you wish to configure in the `DroppableOptions`instance you pass to the plugin.
The table below lists the different properties of the `DroppableOptions`object. Each property is accessible via getter/setter methods.

|| *Property* || *Type* || *Description* || *Default value* || *Comments* ||
||disabled||boolean||Disables (true) or enables (false) the drop operation. ||false||-|| 
||accept||String or !AcceptFunction||Define draggable elements that will be accepted by the droppable ||null||If this option is null, the droppable accepts all draggable|| 
||activeClass||String||Css class added to the droppable when it is active (an acceptable draggable is being dragged)) ||null||If this option is null, no class is added||
||draggableHoverClass||String||Css class that will be added to an acceptable draggable when it is being dragged over the droppable||null||If this option is null, no class is added||
||droppableHoverClass||String||Css class that will be added to a droppable when an acceptable draggable is being dragged over it||null||If this option is null, no class is added||  
||greedy||boolean||When set to true it prevents events propagation on parents droppable of the droppable||false||-||
||onActivate||!DroppableFunction||Callback function called when a droppable is activated (when an acceptable draggable starts to drag)||null||-||  
||onDeactivate||!DroppableFunction||Callback function called when a droppable is deactivated (when an acceptable draggable stops to drag)||null||-||  
||onDrop||!DroppableFunction||Callback function called when an acceptable draggable is dropped on the droppable||null||-|| 
||onOut||!DroppableFunction||Callback function called when an acceptable draggable is being dragged out of the droppable||null||-||
||onOver||!DroppableFunction||Callback function called when an acceptable draggable is being dragged over the droppable||null||-||
||scope||String||Used to group sets of draggable and droppable widget, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by this last.||"default"||-||  
||tolerance||!DroppableTolerance||Specifies which mode to use for testing whether a draggable is 'over' a droppable.||DroppableTolerance.INTERSECT||-||  

Please note that all properties can be modified after the plugin is instantiated. See this [http://gwtquery-plugins.googlecode.com/svn/trunk/droppable/demo/TestOptionsSample/TestOptionsSample.html example] to test the different options.

=Events=
----

As can be seen in the previous paragraph, the `DroppableOptions` object allows you to pass `DropFunction` who will be invoked by the plugin during the drag and drop operation. In addition to invoke these callback functions, the plugin fires some event that you can listen for. For that, we use the [http://code.google.com/intl/fr/webtoolkit/doc/latest/tutorial/manageevents.html GWT event system]. Just pass as argument a `EventBus` object when you call the plugin :

{{{
import static gwtquery.plugins.droppable.client.Droppable.Droppable;
import gwtquery.plugins.droppable.client.DroppableOptions;

import com.google.gwt.event.shared.SimpleEventBus;

 
  public void onModuleLoad() {
    
    ...
    
    // create an instance of SimpleEventBus to bind events fired by the selectable plug-in
    EventBus eventBus = new SimpleEventBus();


    // call the plugin
    $(".dropTarget").as(Droppable).options(new DroppableOptions(), eventBus);

  }


}}}

Now register your implementation of `EventHandler` :

{{{
  private static class MyEventHandler implements DragEventHandler,
      DragStopEventHandler{
    
     public void onDrag(DragEvent event) {
      String msg = "Component " + event.getDraggable().getId() + " is dragging";
      infoMsg.setHTML(msg);

    }

    public void onDragStop(DragStopEvent event) {
      infoMsg.setHTML("End of the drag operation");

    }

  }

   ...
  
    MyEventHandler handler = new MyEventHandler();
    //bind events who interest us
    handlerManager.addHandler(DragEvent.TYPE, handler);
    handlerManager.addHandler(DragStopEvent.TYPE, handler);
  
}}}

The different events that you can listen for are :
{{{
gwtquery.plugins.draggable.client.events.DragStartEvent;
gwtquery.plugins.draggable.client.events.DragEvent;
gwtquery.plugins.draggable.client.events.DragStopEvent;
}}}

=Integration with GWT=
----

The draggable plugin can be used to make any GWT widget draggable !! You just have to wrap your widget in a `DraggableWidget` object and it will be automatically draggable. This `DraggableWidget` object allows GWT devellopers to use the plugin without any knowledge about GQuery.

{{{

import gwtquery.plugins.draggable.client.gwt.DraggableWidget;
...

public class MyGWTApplication implements EntryPoint {

  public void onModuleLoad() {
    //create your widget and let's assume it is a DecoratedTabPanel
    DecoratedTabPanel myWidget = createMyWidget();
    
    //make it draggable
    DraggableWidget<DecoratedTabPanel>  myDraggableWidget = new DraggableWidget<DecoratedTabPanel>(myWidget);
    
    //set options for the drag operation
    myDraggableWidget.setAxis(AxisOption.X_AXIS); 
    myDraggableWidget.setCursor(Cursor.MOVE);
    ....

    //Add your draggable widget to the dom
    RootPanel.get().add(myDraggableWidget);

    // if you want to call some function on your original widget use getOriginalWidget() method. It will be automatically casted.
   myDraggableWidget.getOriginalWidget().selectTab(0);    

}
}  
}}}

For more example, see [http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/GWTIntegrationSample/GWTIntegrationSample.html here] 

=Examples=

To better understand the plugin, examples are available
  * Example 1 : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/DraggableSample1/DraggableSample1.html
This example shows how to make a simple div draggable. It defines also some callback functions to display informations on the drag operation.  
  * Test the options : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/DraggableSample2/DraggableSample2.html
Play with the different options of the draggable plug-in and see the effect they have on the drag operation.
  * Snap sample : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/SnapSample/SnapSample.html
Watch the snap options in action.
  * Containment sample : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/ContainmentSample/Containment.html
This example shows you how it's possible to constraint the drag area with the containment option.
  * Stack sample : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/StackSample/StackSample.html
This sample shows how the draggable plugin can handle the z-index to bring on top the current draggable item.
  * GWT integration : http://gwtquery-plugins.googlecode.com/svn/trunk/draggable/demo/GWTIntegrationSample/GWTIntegrationSample.html
This sample shows how it is easier to add drag functionnality to any GWT widget. Simply in using the !DraggableWidget wrapper !! This example shows also how to use event fired by the plugin.

All examples are tested on Internet explore 6, 7 and 8, Firefox 3.6, Google Chrome 4, Opera 10 and Safari 5.