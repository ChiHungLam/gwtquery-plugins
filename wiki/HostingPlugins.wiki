#summary Creating new plugins for gwtquery

<wiki:toc max_depth="3" />

= Introduction =
We encourage plugin developers to create and host the plugins on googlecode repositoory. This makes it easier for the community to help you more easily, as well as to have the community benefit from the plugin. 

= Request hosting =
Simply subscribe to the gwtquery mailing list and send an email to the list asking for commit access, describing briefly your plugin, and specifying your gmail user id .

= Steps to create a new plugin =
The following procedure describes how to create a new plugin from scratch using the gwtquery-plugin-archetype hosted on the maven central repository.

 * Assuming your have java and maven (2.2.1) installed, and the command mvn is in your path, just run:
{{{
  mvn archetype:generate  \
      -DarchetypeGroupId=com.googlecode.gwtquery \
      -DarchetypeArtifactId=gquery-plugin-archetype \
      -DarchetypeVersion=0.3 \
      -DartifactId=myplugin -DpluginName=MyPlugin
}}}
where `artifactId` represents the lower-case name of your plugin, and `pluginName` is the Camelized name of it.
 * The generated project has everything to start a new plugin: license, code, sample and test. Use this code as reference, and maintain the structure.
 * Change to the plugin folder and check that everything is all right:
{{{
  cd myplugin
  mvn install
  cd sample
  mvn gwt:run
}}}

= Importing the project in eclipse =
The archetype generates a project ready to use in eclipse, but before importing it you have to install the following plugins:
 * Google plugin for eclipse (update-site: [http://dl.google.com/eclipse/plugin/3.6])
 * Sonatype Maven plugin (update-site: [http://m2eclipse.sonatype.org/site/m2e])
 * Subversion plugin (update-site: [http://subclipse.tigris.org/update_1.6.x])
Then you can import the project in your eclipse workspace:
 * File -> Import -> Existing Projects into Workspace
After this you should be able to run the project in development mode and to run the gwt test unit.
 * Right click on the project -> Run as -> Web Application
 * Right click on the test class -> Run as -> GWT JUnit Test

= Commit your plugin to the repository =
*Important:* before you commit any code, check that the LICENSE file is in the root folder of your plugin, and be sure you agree the license terms.

Create a new folder in svn trunk, this folder should match the artifactId of your plugin, for instance:
 * https://gwtquery-plugins.googlecode.com/svn/trunk/myplugin
Note that previously you had to ask for commit access. 

The password for google code is different to the one you use to read gmail. 

If your browser is logged in gmail, you could see your password visiting this url:  https://code.google.com/hosting/settings.

Please, be sure that the tests run before committing anything, and make good comments to your commits.

= Releasing your plugin =
Use maven to release the plugin, but previously be sure that your $HOME/.m2/settings.xml file has the information needed to authenticate in googlecode site:
{{{
        <server>
            <id>googlecode</id>
            <username>your_username</username>
            <password>your_password</password>
        </server>
}}}
Also add to the parent pom your developer information.
{{{
  <developers>
    <developer>
      <id>your_id</id>
      <name>your full name</name>
      <email>your email</email>
      <organization>your organization</organization>
    </developer>
  </developers>
}}}
Then execute these commands to publish the artifact in the download page and in the project maven repository
{{{
  mvn clean 
  mvn deploy
}}}

= Maintain the plugin =
 * Be in touch with the people who is using your plugin, and the users of the gwtquery library participating in the gwtquery mailing list. 
 * Read the issues list periodically  and fix those issues related with your plugin.
 * Create and maintain a wiki page with the name of your plugin explaining how to use it, and put links to examples and javadocs.
 * Release the plutin as soon as it is ready to use, after adding a new feature or a fix.