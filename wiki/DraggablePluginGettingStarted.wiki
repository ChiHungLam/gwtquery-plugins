#summary How to use the draggable plugin !
<wiki:toc max_depth="3" />
=Plugin Information=

|| *Plugin name* ||Draggable||
|| *Latest release* ||0.1||
|| *Latest release date* ||||
|| *Maintainer* ||[http://code.google.com/u/julien.dramaix/ Julien Dramaix]||
|| *Issues tracking* || [http://code.google.com/p/gwtquery-plugins/issues/list?can=2&q=label%3ADraggable Open issues]||

This plugin is a gwt clone of the [http://jqueryui.com/demos/draggable/ JQuery-ui draggable plugin]

The Draggable plugin allows to enable draggable functionality on any DOM element and GWT widget. It makes the selected elements draggable by mouse.

=Changelog=
==v0.1==
  * First release

=Using the plugin=

==Dependency==

The draggable plugin needs the common-ui library to work. If you are not using maven, just download the [http://code.google.com/p/gwtquery-plugins/downloads/detail?name=commonui-plugin-1.1.jar last version of the library] and put it in the war/WEB-INF/lib folder.

==Configuration==

First of all you have to include the library in the classpath of your project. If you are using ant normally it is enough to download the library from the [http://code.google.com/p/gwtquery-plugins/downloads/list downloads page] and put it in the war/WEB-INF/lib folder. 

If you use maven, you have to add these blocks to your pom.xml
{{{
   <repositories>
        <repository>
         <id>plugins</id>
         <url>http://gwtquery-plugins.googlecode.com/svn/mavenrepo</url>
       </repository>
   </repositories>

   <build>
    <dependencies>
        <dependency>
            <groupId>com.googlecode.gwtquery.plugins</groupId>
            <artifactId>draggable-plugin</artifactId>
            <scope>0.1</version>
        </dependency>
    </dependencies>
   </build>
}}}

Then you need to inherit the plugin in your Module.gwt.xml file:
{{{
  <inherits name='gwtquery.plugins.draggable.Draggable'/>
}}}

And finally, as with all gwtQuery plugins, just call the selectable plugin like that :
{{{
import static gwtquery.plugins.draggable.client.Draggable.Draggable;

...

$(".iWantToDrag").as(Draggable).draggable();
}}}

It calls the plugin with the default options. The elements having 'iWantToDrag' as css class name are now draggable.

=Settings=

The drag operation is fully configurable ! You just have to give an instance of the class `gwtquery.plugins.draggable.client.DraggableOptions` when you call the plugin :
{{{
import static gwtquery.plugins.selectable.client.Selectable.Selectable;
import gwtquery.plugins.selectable.client.SelectableOptions;

...

DraggableOptions options = new DraggableOptions();
//set the options you want... See next paragraph
...
//call the plug-in with your options 
(".iWantToDrag").as(Draggable).draggable(options); 
}}}

==`DraggableOptions` Object==

To configure the plugin, just set value you want in the different properties of the `DraggableOptions` instance you give to the plugin.
The table below lists the different properties of the `DraggableOptions` object. Each property is reachable by its respective getter/setter.

|| *Property* || *Type* || *Description* || *Default value* || *Comments* ||
||disabled||boolean||Disables (true) or enables (false) the drag operation. ||false||-|| 
||delay||int||Time in milliseconds to define when the drag should start. ||1||-|| 
||distance||int||Tolerance, in pixels, for when the drag should start. If specified, drag will not start until after mouse is dragged beyond distance. ||0||-||
||addClasses||boolean||If set to false, will prevent the ui-draggable class from being added. This may be desired as a performance optimization when calling .draggable() init on many hundreds of elements.||true||-||
||appendTo||String||The element selected by the appendTo option will be used as the draggable helper's container during dragging. By default, the helper is appended to the same container as the draggable.||null||-||  
||axis||AxisOption||Constrains dragging to either the horizontal (AxisOption.X_AXIS) or vertical (AxisOption.Y_AXIS) axis.||AxisOption.NONE||-||  
||containment||String or int[]||Constrains dragging to within the bounds of the specified region or element||null||-||  
||cursor||Cursor||Specify the css cursor to use during the drag operation.||Cursor.AUTO||-|| 
||cursorAt||CursorAt||Moves the dragging helper so the cursor always appears to drag from the same position.||null||-|| 
||grid||int[]||Snaps the dragging helper to a grid. The array of int defining the dimension of the cell of the snap grid.||null||-|| 
||handle||String||Restricts drag start when the user clicks on the specified element(s).||null||-||  
||helper||String or Element or GQuery or HelperType||Allows to use a dom element or a clone of the draggable or the draggable itself for dragging display||HelperType.ORIGNAL||By default, the draggable itself will be used. Using clone or dom element will not move the original draggable. These options are useful in combination with the droppable plug-in|| 
||onDrag||Function||The callback function called when the drag operation is dragging ||null||-|| 
||onDragStart||Function||The callback function called when the drag operation starts ||null||-|| 
||onDragStop||Function||The callback function called when the drag operation ends ||null||-|| 
||opacity||Float||Specify the opacity of the helper during the drag.||null||If null, the opacity of the helper is not changed||   
||revert||RevertOption||Determine if the helper will return to its starts position when dragging stops||RevertOption.NEVER||the two following options RevertOption.ON_VALID_DROP and RevertOption.ON_INVALID_DROP are useful in combination with the droppable plugin||
||revertDuration||int||The duration of the revert animation, in milliseconds.||null||-||    
||scope||String|| Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.||'default'||-||
||scroll||boolean|| Define if the container scroll while dragging||true||-||
||scrollSensitivity||int|| Distance in pixels from the edge of the viewport after which the viewport should scroll. Distance is relative to pointer, not to the draggable.||20||-||
||scrollSpeed||int|| The speed at which the window should scroll once the mouse pointer gets within the scrollSensitivity distance.||20||-||
||snap||boolean|| Define if the draggable will snap to the edges of the other draggable elements when it is near an edge of these elements.||false||-||
||snap||GQuery or String|| The draggable will snap to the edges of the selected elements when near an edge of the element.||null||-||
||snapMode||SnapMode|| Determines which edges of snap elements the draggable will snap to.||SnapMode.BOTH||Possible values: SnapMode.INNER, SnapMode.OUTER, SnapMode.BOTH||
||snapTolerance||int|| The distance in pixels from the snap element edges at which snapping should occur.||20||-||
||stack||GQuery or String|| Controls the z-Index of the selected elements, always brings to front the dragged item.||null||-||
||zIndex||Integer|| z-index for the helper while being dragged.||null||-||
TBC