#summary How to use the drag-and-drop plugin with GWT widgets

DRAFT VERSION
<wiki:toc max_depth="3" />
= Introduction =
----
The draggable and droppable plugins of gwtquery allows to make any DOM elements draggable and droppable. In addition, it offers a API in order to add drag and drop support to your GWT widgets included also the new data presentation widgets (aka cell widgets).

This article explains how to use this API in your GWT project.

= Configuration =
----
!GwtQuery provides you a bundle including all stuff you need to use gwtquery and its draggable and dropable plugins

First at all, if you don't use maven, you have to download the [http://code.google.com/p/gwtquery-plugins/downloads/detail?name=gquery-dnd-bundle-1.0.1.jar gquery-dnd-bundle jar file] and include it in the classpath of you project.

If you use maven, you have to add these blocks to your pom.xml
{{{
   <repositories>
        <repository>
         <id>plugins</id>
         <url>http://gwtquery-plugins.googlecode.com/svn/mavenrepo</url>
       </repository>
   </repositories>

   <dependencies>
        <dependency>
            <groupId>com.googlecode.gwtquery.bundles</groupId>
            <artifactId>gquery-dnd-bundle</artifactId>
            <version>1.0.1</version>
            <scope>provided</scope>
        </dependency>
   </dependencies>
}}}

Then you need to inherit the plugin in your Module.gwt.xml file:
{{{
  <inherits name='gwtquery.plugins.droppable.Droppable'/>
}}}

Please note that the drag-and-drop plugin need at least GWT 2.1.0 to work.

= Add drag support to your widgets =
----

== The !DraggableWidget class ==
To make your widget draggable, you have two simple possibilities :
 * wrap your widget in a `DraggableWidget`instance 
 * extend you widget class with the `DraggableWidget`class.

Example with wrapping:
{{{

    Label label = new Label("I want to become a draggable widget !!");
    //wrap the original widget in a DraggableWidget
    DraggableWidget<Label> draggableLabel = new DraggableWidget<Label>(label);
    //configure the drag behavior (see next chapters)
    draggableLabel.setDraggingCursor(Cursor.MOVE);
    draggableLabel.setDraggingOpacity((float)0.8);
    
    ...
    
    //add the draggableLabel to the DOM
    RootPanel.get().add(draggableLabel);
    
    //if you want to do something in the original label, just call getOriginalWidget method
    draggableLabel.getOriginalWidget().setText("I'm now draggable");
}}}

Example with subclassing :

{{{
public class DraggableLabel extends DraggableWidget<Label> {

  public DraggableLabel() {
    //as DraggableWidget is a composite call initWidget() method to setup your widget
    initWidget(new Label("I'm a draggable label"));
    
    //configure the drag behavior (see next paragraphs)
    setDraggingCursor(Cursor.MOVE);
    setDraggingOpacity((float)0.8); 
  }

  public void setText(String text){
    getOriginalWidget().setText(text);
  }
}


}}}

== Configure the dragging behavior ==

The API of the `DraggableWidget` object proposes a set of methods allowing you to configure the drag behavior of your widget. You can find the list of all options and their related explanation in this [http://code.google.com/p/gwtquery-plugins/wiki/DraggablePluginGettingStarted#DraggableOptions_Object table]. 

An example is always more understandable than a long text of explanation :
{{{
Label label = new Label("I want to be a droppable widget !!");
    //wrap the original widget in a DraggableWidget
    DraggableWidget<Label> draggableLabel = new DraggableWidget<Label>(label);
    
    //configure the drag behavior
    //use a clone of the helper as dragging display
    draggableLabel.useOriginalWidgetAsHelper();
    //change the cursor during the drag
    draggableLabel.setDraggingCursor(Cursor.MOVE);
    //set the opacity of the dragging display
    draggableLabel.setDraggingOpacity((float)0.8);
    // the widget can only be dragged on horizontal axis
    draggableLabel.setAxis(AxisOption.Y_AXIS);
    //revert the dragging display on its original position is not drop occured
    draggableLabel.setRevert(RevertOption.ON_INVALID_DROP);
    //snap the dragging display to a 50x50px grid
    draggableLabel.setGrid(new int[]{50,50});
    ...
}}}

Don't hesitate to try our [http://gwtquery-plugins.googlecode.com/svn/trunk/droppable/demo/TestOptionsSample/TestOptionsSample.html "options in action"] example to play around with most of the options of the `DraggableWidget`.

== The drag events ==
The drag-and-drop plugin fires different events during the drag operation that you can handle to implement your custom code.

Please find the list of drag events :
 * `gwtquery.plugins.draggable.client.events.BeforeDragStartEvent` : fired before the before the initialization of the drag operation
 * `gwtquery.plugins.draggable.client.events.DragStartEvent` : fired when the drag starts
 * `gwtquery.plugins.draggable.client.events.DragEvent` : fired durint the drag
 * `gwtquery.plugins.draggable.client.events.DragStopEvent` : fired when the drag operation stops

To handle an event, just register an associated event handler in your draggable widget :
{{{
    draggableLabel.addDragStartHandler(new DragStartEventHandler() {
      
      public void onDragStart(DragStartEvent event) {
        //retrieve the widget that is being dragged
        DraggableWidget<Label> draggableWidget = (DraggableWidget<Label>)event.getDraggableWidget();
        draggableWidget.getOriginalWidget().setText("I'm dragging");
        
      }
    });
    
    draggableLabel.addDragStopHandler(new DragStopEventHandler() {
      
      public void onDragStop(DragStopEvent event) {
        //retrieve the widget that was being dragged
        DraggableWidget<Label> draggableWidget = (DraggableWidget<Label>)event.getDraggableWidget();
        draggableWidget.getOriginalWidget().setText("I'm not dragging");
        
      }
    });
}}}

All drag events provide useful method to retrieve the dragging widget and the associated dragging dispaly (called the helper) excepted on the `BeforeDragStartEvent`where the helper is nuul because the drag operation is not initialized yet.


= Add drop support to your widgets =
----

== The !DroppableWidget class ==

In the same way, to make your widget droppable, you have two possibilities :
 * wrap your widget in a `DroppableWidget`instance 
 * extend you widget class with the `DroppableWidget`class

Example with wrapping:
{{{
    Label label = new Label("I want to be a droppable widget !!");
    //wrap the original widget in a DroppableWidget
    DroppableWidget<Label> droppableLabel = new DroppableWidget<Label>(label);
    //configure the drop behaviour (see next paragraph)
    droppableLabel.setTolerance(DroppableTolerance.POINTER);
    
    //add the droppableLabel to the DOM
    RootPanel.get().add(droppableLabel);
    
    //if you want to do something in the original label, just call getOriginalWidget method
    droppableLabel.getOriginalWidget().setText("I'm now droppable");
}}}

Example with subclassing :
{{{

}}}

TO BE CONTINUED