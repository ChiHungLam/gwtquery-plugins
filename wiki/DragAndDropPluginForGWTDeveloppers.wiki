#summary How to use the drag-and-drop plugin with GWT widgets

DRAFT VERSION
<wiki:toc max_depth="3" />
= Introduction =
----
The draggable and droppable plugins of gwtquery allows to make any DOM elements draggable and droppable. In addition, it offers a API in order to add drag and drop support to your GWT widgets included also the new data presentation widgets (aka cell widgets).

This article explains how to use this API in your GWT project.

= Configuration =
----
!GwtQuery provides you a bundle including all stuff you need to use gwtquery and its draggable and dropable plugins

First at all, if you don't use maven, you have to download the [http://code.google.com/p/gwtquery-plugins/downloads/detail?name=gquery-dnd-bundle-1.0.1.jar gquery-dnd-bundle jar file] and include it in the classpath of you project.

If you use maven, you have to add these blocks to your pom.xml
{{{
   <repositories>
        <repository>
         <id>plugins</id>
         <url>http://gwtquery-plugins.googlecode.com/svn/mavenrepo</url>
       </repository>
   </repositories>

   <dependencies>
        <dependency>
            <groupId>com.googlecode.gwtquery.bundles</groupId>
            <artifactId>gquery-dnd-bundle</artifactId>
            <version>1.0.1</version>
            <scope>provided</scope>
        </dependency>
   </dependencies>
}}}

Then you need to inherit the plugin in your Module.gwt.xml file:
{{{
  <inherits name='gwtquery.plugins.droppable.Droppable'/>
}}}

Please note that the drag-and-drop plugin need at least GWT 2.1.0 to work.

= Add drag-and-drop support to your widgets =
----

== The DraggableWidget class ==
To make your widget draggable, you have two possibilities :
 * wrap your widget in a `DraggableWidget`instance 
 * extend you widget class with the `DraggableWidget`class.

Example with wrapping:
{{{

    Label label = new Label("I want to become a draggable widget !!");
    //wrap the original widget in a DraggableWidget
    DraggableWidget<Label> draggableLabel = new DraggableWidget<Label>(label);
    //configure the drag behavior (see next chapters)
    draggableLabel.setDraggingCursor(Cursor.MOVE);
    draggableLabel.setDraggingOpacity((float)0.8);
    
    ...
    
    //add the draggableLabel to the DOM
    RootPanel.get().add(draggableLabel);
    
    //if you want to do something in the originale label, just call getOriginalWidget method
    draggableLabel.getOriginalWidget().setText("I'm now draggable");
}}}

Example with subclassing :

{{{
public class DraggableLabel extends DraggableWidget<Label> {

  public DraggableLabel() {
    //as DraggableWidget is a composite call initWidget() method to setup your widget
    initWidget(new Label("I'm a draggable label"));
    
    //configure the drag behavior (see next paragraphs)
    setDraggingCursor(Cursor.MOVE);
    setDraggingOpacity((float)0.8); 
  }

  public void setText(String text){
    getOriginalWidget().setText(text);
  }
}


}}}

== The DroppableWidget class ==

In the same way, to make your widget droppable, you have two possibilities :
 * wrap your widget in a `DroppableWidget`instance 
 * extend you widget class with the `DroppableWidget`class

Example with wrapping:
{{{
    Label label = new Label("I want to become a droppable widget !!");
    //wrap the original widget in a DroppableWidget
    DroppableWidget<Label> droppableLabel = new DroppableWidget<Label>(label);
    //configure the drop behaviour (see next paragraph)
    droppableLabel.setTolerance(DroppableTolerance.POINTER);
    
    //add the droppableLabel to the DOM
    RootPanel.get().add(droppableLabel);
    
    //if you want to do something in the original label, just call getOriginalWidget method
    droppableLabel.getOriginalWidget().setText("I'm now droppable");
}}}

Example with subclassing :
{{{

}}}
TO BE CONTINUED